import os
import requests
from minio import Minio
from minio.error import S3Error

# Configuración MinIO
MINIO_ENDPOINT = "localhost:9000"
MINIO_ACCESS_KEY = "minioadmin"
MINIO_SECRET_KEY = "minioadmin"
BUCKET_NAME = "gene-expression-data"

# Cliente MinIO
minio_client = Minio(MINIO_ENDPOINT, access_key=MINIO_ACCESS_KEY, secret_key=MINIO_SECRET_KEY, secure=False)
if not minio_client.bucket_exists(BUCKET_NAME):
    minio_client.make_bucket(BUCKET_NAME)

def download_file(url, dest):
    r = requests.get(url, stream=True)
    if r.status_code == 200:
        with open(dest, "wb") as f:
            for chunk in r.iter_content(8192):
                f.write(chunk)
        return True
    else:
        print(f"Error {r.status_code} descargando {url}")
        return False

def main():
    print("Obteniendo lista de datasets desde Xena Browser API...")
    resp = requests.get("https://xenabrowser.net/datapages/api/filters")
    resp.raise_for_status()
    data = resp.json()
    datasets = data.get("dataset", [])

    if not datasets:
        print("No se encontraron datasets en la respuesta de la API.")
        return

    os.makedirs("downloads", exist_ok=True)
    count = 0

    for ds in datasets:
        label = ds.get("Dataset", "")
        host = ds.get("Host", "")
        path = ds.get("Url", "")

        if "IlluminaHiSeq" in label and "normalized" in label.lower():
            file_url = host + path
            filename = label.replace(" ", "_") + os.path.splitext(path)[-1]  # preserva extensión
            local_path = os.path.join("downloads", filename)

            print(f"\nDescargando dataset: {label}")
            if download_file(file_url, local_path):
                try:
                    minio_client.fput_object(BUCKET_NAME, filename, local_path)
                    print(f"Subido a MinIO → {BUCKET_NAME}/{filename}")
                    count += 1
                except S3Error as e:
                    print(f"Error subiendo a MinIO: {e}")

    print(f"\nProceso completado. Se descargaron y subieron {count} archivos.")

if __name__ == "__main__":
    main()
